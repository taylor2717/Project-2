---
title: "NFL Play-by-Play (2009–2016): Static Exploration"
format: html
editor: visual
---

## Purpose

This notebook is the **static exploration** that informed my Shiny app design.

\
Here I:

\- describe and load the dataset used in the app

\- produce **one-way** and **two-way** contingency tables

\- compute **numeric summaries** (mean/median/SD) of quantitative variables at levels of a categorical

\- and create **six plots** (≥4 multivariate), mirroring the app’s plot types:

1\) Bar (count)\
2) Boxplot by group\
3) **Violin by group**\
4) Scatter (num1 vs num2)\
5) **2D bins (num1 vs num2)**\
6) Heatmap (two cats)

I also apply **faceting** and keep labels/titles consistent so these visuals map cleanly to the interactive controls.

## Data & context

I use a preprocessed subset of the NFL play-by-play dataset.\
The original CSV (2009–2018) was \>600MB and unsuitable for Git/GitHub and shinyapps.io,\
so I saved a smaller **RDS** with only **2009–2016** and a focused set of columns.

```{r}
library(dplyr)
library(ggplot2)
library(readr)
library(janitor)
library(forcats)
library(tidyr)

# Load the static data file used by the app
DATA_PATH <- "project2/data/nfl_pbp_2009_2016.rds"
pbp <- readRDS(DATA_PATH)
```

```{r}
# ---- Light prep: make needed columns & factors robustly ----
# down/qtr as factors if present
if ("down" %in% names(pbp)) pbp$down <- factor(pbp$down)
if ("qtr"  %in% names(pbp)) pbp$qtr  <- factor(pbp$qtr)

# Determine play-type column or derive from pass/rush
pt_col <- intersect(c("play_type","PlayType","play.type"), names(pbp))
if (length(pt_col) == 1) {
  pbp <- pbp %>%
    mutate(play_type = as.factor(.data[[pt_col]]))
} else if (all(c("pass","rush") %in% names(pbp))) {
  pbp <- pbp %>%
    mutate(play_type = factor(case_when(
      pass == 1 ~ "pass",
      rush == 1 ~ "rush",
      TRUE      ~ "other"
    )))
} else {
  pbp$play_type <- factor("other")
}
```

```{r}
# one way contingency table
oneway <- pbp %>%
  count(play_type, name = "n") %>%
  arrange(desc(n)) %>%
  mutate(pct = round(100 * n / sum(n), 2))
knitr::kable(oneway, caption = "One-way table: Play type")

```

```{r}
# two way contingency table
twoway <- pbp %>%
  filter(!is.na(down), !is.na(play_type)) %>%
  tabyl(down, play_type) %>%
  adorn_totals(c("row","col")) %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  as.data.frame()
knitr::kable(twoway, caption = "Two-way: Down × Play type (row % with counts)")

```

```{r}
# Numerical Summaries
num_var  <- "epa"           
cat_var  <- "down"          # categorical to group by
stopifnot(num_var %in% names(pbp), cat_var %in% names(pbp))

num_summ <- pbp %>%
  filter(!is.na(.data[[num_var]]), !is.na(.data[[cat_var]])) %>%
  group_by(.data[[cat_var]]) %>%
  summarise(
    n      = dplyr::n(),
    mean   = mean(as.numeric(.data[[num_var]]), na.rm = TRUE),
    median = median(as.numeric(.data[[num_var]]), na.rm = TRUE),
    sd     = sd(as.numeric(.data[[num_var]]), na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(n))
knitr::kable(num_summ, caption = paste("Numeric summaries of", num_var, "by", cat_var))

```

```{r}
# Plot 1: Bar
ggplot(pbp, aes(x = play_type, fill = down)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Play Types by Down (Counts)",
    x = "Play type", y = "Count", fill = "Down"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))

```

```{r}
# Plot 2: Boxplot
ggplot(pbp %>% filter(!is.na(epa)),
       aes(x = down, y = as.numeric(epa), fill = play_type)) +
  geom_boxplot(outlier.alpha = 0.35) +
  labs(
    title = "EPA by Down and Play Type",
    x = "Down", y = "EPA", fill = "Play type"
  ) +
  theme_minimal()

```

```{r}
# Plot 3: Violin
ggplot(pbp %>% filter(!is.na(epa)),
       aes(x = down, y = as.numeric(epa), fill = play_type)) +
  geom_violin(trim = FALSE, alpha = 0.85) +
  labs(
    title = "EPA by Down and Play Type (Violin)",
    x = "Down", y = "EPA", fill = "Play type"
  ) +
  theme_minimal()

```

```{r}
# Plot 4: Scatter
ggplot(pbp %>% filter(!is.na(yards_gained), !is.na(epa)),
       aes(x = as.numeric(yards_gained), y = as.numeric(epa),
           color = play_type)) +
  geom_point(alpha = 0.4) +
  facet_wrap(vars(down)) +
  labs(
    title = "EPA vs Yards Gained (Faceted by Down)",
    x = "Yards gained", y = "EPA", color = "Play type"
  ) +
  theme_minimal()

```

```{r}
# Plot 5: 2D Bins
ggplot(pbp %>% filter(!is.na(ydstogo), !is.na(yardline_100)),
       aes(x = as.numeric(ydstogo), y = as.numeric(yardline_100))) +
  geom_bin2d(bins = 30) +
  labs(
    title = "2D-Binned Density: Yards to Go vs Yardline",
    x = "Yards to go", y = "Yardline (0 = TD)"
  ) +
  theme_minimal()

```

```{r}
# Plot 6: Heatmap
counts <- pbp %>% count(down, play_type, name = "n")
ggplot(counts, aes(x = play_type, y = down, fill = n)) +
  geom_tile() +
  labs(
    title = "Heatmap: Down × Play Type",
    x = "Play type", y = "Down", fill = "Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))

```
